#
# git-config - Get and set repository or global options.
#

[alias]
  # add all
  aa = add --all

  # add by patch - looks at each change, and asks if we want to put it in the repo.
  ap = add --patch

  # add just the files that are updated.
  au = add --update

  # branch
  br = branch

  # branches list
  brl = branch --list

  # renamed branch
  rbr = branch -m

  # commit
  ci = commit

  # commit with a message
  cm = git commit -a -m

  # Switch branch
  co = checkout

  # Create a new branch and switch in
  cob = checkout -b

 # Merging only one file from a git branch (patching)
 # git checkout --patch [branch] [file.txt]
  cop = checkout --patch

  # Show list of files in a conflict state
  conf = !"git ls-files -u | awk '{print $4}' | sort -u"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # pull if a merge can be resolved as a fast-forward, otherwise fail.
  pf = pull --ff-only

  # Git Pull While Ignoring Local Changes
  # https://stackoverflow.com/questions/4157189/git-pull-while-ignoring-local-changes
  ph = !git reset --hard && git pull

  # When we use "git pull --rebase", git does a fetch then a rebase.
  # A rebase resets the HEAD of your local branch to be the same as
  # the remote HEAD, then replays your local commits back into repo.
  # This means you don't get any noisy merge messages in your history.
  # This gives us a linear history, and also helps with git bisect.
  pr = pull --rebase

  # View the current working tree status using the short format
  ss = status -s

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  # https://stackoverflow.com/questions/4298960/git-add-and-commit-in-one-command
  acp = !"git add -A && git commit -av && git push"

  # Git tracks the remote branches locally and so you have to refresh your
  # tracking list to be able to see the new remote branches run
  fe = !git fetch && git fetch --dry-run

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  graph = !"git log -n 20 --graph --oneline --pretty=format:'%C(green)%h%Creset «%s» by %an, %ar'"

  # Show detail last commit
  # See: https://git-scm.com/docs/pretty-formats
  # See: https://git-scm.com/docs/git-commit-tree#_date_formats
  # See: https://stackoverflow.com/questions/7853332/how-to-change-git-log-date-formats#7853670
  hist = "!f() { git log -n 10 --oneline --pretty=format:'Last committed was %C(green)%h%Creset by %an (%ae)%nAbout %ar on %cd%nThe title was «%s» %n' --decorate --date=format:'%_d %B %Y at %H:%M UTC%z' --grep=$1; }; f"

  # Push
  p = push

  # Push local repository online
  ph = push -u origin master

  # Pull one file from a repo
  pll = git pull origin

  # Clone a repository including all submodules
  cl = clone --recursive

  # Resets the index and working tree. Any changes to tracked files in the
  # working tree since <commit> are discarded.
  re = reset --hard

  # Restore all the files from Staging Area to the Working Area
  restore = checkout --all

  # Status
  st = status

  # Unstage
  un = restore --staged

  # Show changes of all the files
  di = diff .

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  branch = false
  decorate = false
  diff = true
  grep = false
  interactive = false
  pager =  true
  remote = false
  status = true
  showbranch = false
  ui = true

[branch]
  # Show most recently changed branches first.
  sort = -committerdate

[commit]
  # Signing commits
  # https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key
	gpgsign = true

[core]
  # Global `.gitattributes`
  attributesfile = ~/.config/git/attributes

  # Global `.gitignore`
  excludesfile = ~/.config/git/ignore

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # See: http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
  trustctime = false

  # Use 12 characters for the abbreviated commit hash. I can currently make
  # do with 10, but this should provide a certain level of safety for the
  # near-ish future. See the interesting and well-researched article at
  # http://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/
  abbrev = 12

  # Prevent showing files whose names contain non-ASCII symbols as unversioned
  # See: http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`
  # See: https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

  # End-of-line conversion
  # See: https://stackoverflow.com/questions/3206843/how-line-ending-conversions-work-with-git-core-autocrlf-between-different-operat
  autocrlf = input

  # Default editor for commit messages and other inputs
  # Even when EDITOR is set to something else
  # See: https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config#_core_editor
	editor =

[credential]
  helper = osxkeychain

[diff]
  # Use more time to create better diffs. E.g. matching opening/closing braces
  # from neighbour functions.
  algorithm = patience

  # Tells Git to detect renames. If set to "true", it will enable basic
  # rename detection. If set to "copies", it will detect copies, as well.
  renames = copies

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[fetch]
  prune = true

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[http]
  # Increase the Git buffer size to the largest individual file size of your repo
  # See: https://is.gd/FvgXWd
  postBuffer = 157286400

[init]
  # Using 'main' as the name for the initial branch.
	defaultBranch = main

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[pager]
  # Determines which pager is used when Git pages output such as log and diff
  status = true

[push]
  # See `git help config` and search for "push.default"
  # for more information on different options of the below setting.
  # Setting to Git 2.0 default to surpress warning message
  # If you use branches with different remote name, use "upstream"
  # See: https://git-scm.com/docs/git-config#git-config-pushdefault
  default = simple

  # Make `git push` push relevant annotated tags when pushing branches out
  followTags = true

[status]
  # If git only shows that the directory is untracked, then every file in it
  # (including files in subdirectories) is untracked.
  showUntrackedFiles = all

[user]
  # Show untracked files in git instead of untracked directory.
  useConfigOnly = true

  # Credentials
	name =
	email =
	signingkey =
