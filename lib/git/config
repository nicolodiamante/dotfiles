#
# Get and set repositories or global options.
#

[alias]
  # Add just the files that are updated.
  au = add --update

  # Rewriting the most recent commit message
  ca = "git commit --amend"

  # Create a new branch and switch in
  cb = checkout -b

  # Commit with credentials. # Use it with git cc "My message is awesome."
  cc = "!f() { git -c \"user.name=$GIT_AUTH_NAME\" -c \"user.email=$GIT_AUTH_EMAIL\" -c \"user.signingkey=$GIT_AUTH_KEY\" commit -S -m \"$1\"; }; f"

  # Switch branch
  co = checkout

  # Commit with a message
  cm = "!f() { git commit -am \"$1\" && git push; }; f"

  # Show list of files in a conflict state
  cs = !"git ls-files -u | awk '{print $4}' | sort -u"

  # Review previous commits. Enter `drop` to delete before your commit.
  d = "!f() { git rebase -i HEAD~\"$1\"; }; f"

  # Remove All Commits – Clear Git History (Local & Remote)
  # 1. Checkout
  # 2. Add all the files
  # 3. Commit the changes
  # 4. Delete the branch
  # 5. Rename the current branch to `main`
  # 6. Force update the repository
  erase = "!f() { git checkout --orphan temp_branch && git add -A && git commit -am 'first commit' && git branch -D main && git branch -m main && git push -f origin main; }; f"

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  g = !"git log -n 20 --graph --oneline --pretty=format:'%C(green)%h%Creset «%s» by %an, %ar'"

  # Show detail last commit
  # See: https://git-scm.com/docs/pretty-formats
  # See: https://git-scm.com/docs/git-commit-tree#_date_formats
  h = "!f() { git log -n 10 --oneline --pretty=format:'Last committed was %C(green)%h%Creset by %an (%ae)%nAbout %ar on %cd%nThe title was «%s» %n' --decorate --date=format:'%_d %B %Y at %H:%M UTC%z' --grep=$1; }; f"

  # Log stats
  last = "log -1 HEAD --stat"

  # Push local repository online
  po = push -u origin main

  # Git Revert Last Commit (preserve changes)
  r = "!f() { git reset --soft HEAD~\"$1\"; }; f"

  # View the current working tree status using the short format
  s = status -sb

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  branch = false
  decorate = false
  diff = true
  grep = false
  interactive = false
  pager =  true
  remote = false
  status = true
  showbranch = false
  ui = true

[branch]
  # Show most recently changed branches first.
  sort = -committerdate

[commit]
  # Signing commits
  # https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key
	gpgsign = true

[core]
  # Global `.gitattributes`
  attributesfile = ~/.config/git/attributes

  # Global `.gitignore`
  excludesfile = ~/.config/git/ignore

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # See: http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
  trustctime = false

  # Use 12 characters for the abbreviated commit hash. I can currently make
  # do with 10, but this should provide a certain level of safety for the
  # near-ish future. See the interesting and well-researched article at
  # http://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/
  abbrev = 12

  # Prevent showing files whose names contain non-ASCII symbols as unversioned
  # See: http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`
  # See: https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

  # End-of-line conversion
  # See: https://stackoverflow.com/questions/3206843/how-line-ending-conversions-work-with-git-core-autocrlf-between-different-operat
  autocrlf = input

  # Default editor for commit messages and other inputs
  # Even when EDITOR is set to something else
  # See: https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config#_core_editor
	editor =

[credential]
  helper = osxkeychain

[diff]
  # Use more time to create better diffs. E.g. matching opening/closing braces
  # from neighbour functions.
  algorithm = patience

  # Tells Git to detect renames. If set to "true", it will enable basic
  # rename detection. If set to "copies", it will detect copies, as well.
  renames = copies

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[fetch]
  prune = true

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[http]
  # Increase the Git buffer size to the largest individual file size of your repo
  # See: https://is.gd/FvgXWd
  postBuffer = 157286400

[init]
  # Using 'main' as the name for the initial branch.
	defaultBranch = main

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[pager]
  # Determines which pager is used when Git pages output such as log and diff
  status = true

[push]
  # See `git help config` and search for "push.default"
  # for more information on different options of the below setting.
  # Setting to Git 2.0 default to surpress warning message
  # If you use branches with different remote name, use "upstream"
  # See: https://git-scm.com/docs/git-config#git-config-pushdefault
  default = simple

  # Make `git push` push relevant annotated tags when pushing branches out
  followTags = true

[status]
  # If git only shows that the directory is untracked, then every file in it
  # (including files in subdirectories) is untracked.
  showUntrackedFiles = all

[user]
  # Show untracked files in git instead of untracked directory.
  useConfigOnly = true

  # Credentials
	name =
	email =
	signingkey =
